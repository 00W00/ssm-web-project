<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
       default-lazy-init="true">

    <description>Shiro安全配置</description>



    <!--自定义realm-->
    <bean id="shiroMyRealm" class="com.nanyin.common.shiro.ShiroMyRealm">
        <!-- 配置密码匹配器 -->
        <!--<property name="credentialsMatcher">-->
            <!--<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">-->
                <!--<property name="hashAlgorithmName" value="md5"/> &lt;!&ndash; 加密算法的名称 &ndash;&gt;-->
                <!--<property name="hashIterations" value="1"/> &lt;!&ndash; 配置加密的次数 &ndash;&gt;-->
            <!--</bean>-->
        <!--</property>-->
    </bean>

    <bean id="kickoutSessionControlFilter" class="com.nanyin.common.shiro.KickoutSessionControlFilter">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="sessionManager" ref="sessionManager"/>

        <property name="kickoutAfter" value="false"/>
        <property name="maxSession" value="3"/>
        <property name="kickoutUrl" value="/login?kickout=1"/>
    </bean>

    <!--安全管理器 核心入口！！-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--自定义Realm-->
        <property name="realm" ref="shiroMyRealm"/>
        <!--缓存管理-->
        <property name="cacheManager" ref="cacheManager"/>
        <!-- 定义要使用的session管理器 -->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- MyBatis使用ehcache缓存 start -->
    <bean id="ehCacheManager"
          class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache.xml" />
        <property name="shared" value="true"></property> <!-- 这里是关键！！！没有必错  -->
    </bean>
    <!-- end MyBatis使用ehcache缓存 -->

    <!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManager" ref="ehCacheManager" />
    </bean>


    <!-- 定义Session ID生成管理器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />
    <!-- 配置Session DAO的操作处理 -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <!-- 设置session缓存的名字，这个名字可以任意 -->
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <!-- 定义该Session DAO操作中所使用的ID生成器 -->
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!-- 在Tomcat运行下默认使用的Cookie的名字为JSESSIONID --> <constructor-arg value="mldn-session-id"/>
        <!-- 保证该系统不会受到跨域的脚本操作供给 -->
        <property name="httpOnly" value="true"/>
        <!-- 定义Cookie的过期时间，单位为秒，如果设置为-1表示浏览器关闭，则Cookie消失 -->
        <property name="maxAge" value="-1"/>
    </bean>


    <!-- 定义会话管理器的操作 -->
    <bean id="sessionManager"
          class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 定义的是全局的session会话超时时间，此操作会覆盖web.xml文件中的超时时间配置 一个小时 -->
        <property name="globalSessionTimeout" value="3600000"/>
        <!-- 删除所有无效的Session对象，此时的session被保存在了内存里面 -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 定义要使用的无效的Session定时调度器 -->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <!-- 需要让此session可以使用该定时调度器进行检测 -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!-- 定义Session可以进行序列化的工具类 -->
        <property name="sessionDAO" ref="sessionDAO"/>
        <!-- 所有的session一定要将id设置到Cookie之中，需要提供有Cookie的操作模版 -->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <!-- 定义sessionIdCookie模版可以进行操作的启用 -->
        <property name="sessionIdCookieEnabled" value="true"/>
    </bean>
    <!-- 配置session的定时验证检测程序类，以让无效的session释放 -->
    <bean id="sessionValidationScheduler"
          class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <!-- 设置session的失效扫描间隔，单位为毫秒  一小时失效 -->
        <property name="sessionValidationInterval" value="3600000"/>
        <!-- 随后还需要定义有一个会话管理器的程序类的引用 -->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- Shiro过滤器 Shiro请求的入口-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 身份认证失败，则跳转到登录页面的配置 -->
        <property name="loginUrl" value="/login"/>
        <!-- 登陆成功后跳转的url -->
        <property name="successUrl" value="/index"/>
        <!-- 权限认证失败，则跳转到指定页面 -->
        <property name="unauthorizedUrl" value="/autho"/>

        <property name="filters">
            <util:map>
                <entry key="user" value-ref="ajaxUserFilter" />
                <entry key="kickout" value-ref="kickoutSessionControlFilter"/>
            </util:map>
        </property>
        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <property name="filterChainDefinitions">
            <value>
                /login= anon
                /toLogin= anon
                /js/** = anon
                /css/** = anon
                /data/** = anon
                /layui/** = anon
                /images/** = anon
                /plugins/** = anon
                /jquery/** = anon
                /build/** = anon
                /logout = logout
                /** = user
            </value>
        </property>
    </bean>

    <bean id="ajaxUserFilter" class="com.nanyin.common.shiro.AjaxUserFilter"/>
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 不懂啥意思 写上就没错 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- 开启Shiro注解 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>



</beans>